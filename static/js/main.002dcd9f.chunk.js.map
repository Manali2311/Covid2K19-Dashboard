{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","Components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchdata","country","a","changableurl","axios","get","console","log","dailydata","modifieddata","map","total","date","reportDate","fetchcountries","countries","name","Chart","useState","dailyydata","setdailydata","useEffect","Fetchapi","Linechart","length","labels","datasets","label","fill","borderColor","Barchart","backgroundColor","options","legend","display","title","text","CountryPicker","handlecountrychange","fetchedcontries","setfetchedcontries","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchdataa","setState","this","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.002dcd9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1S1lQ\",\"card\":\"Cards_card__3F_Wd\",\"infected\":\"Cards_infected__23uXv\",\"recovered\":\"Cards_recovered__14S4f\",\"deaths\":\"Cards_deaths__2bLVR\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    // console.log(confirmed)\r\n    if (!confirmed) {\r\n        return \"Loading...\";\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recoved</Typography>\r\n                     <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoved cases from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n               <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchdata = async ( country )=>{\r\n    let changableurl = url;\r\n\r\n    if(country){\r\n        changableurl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n\r\nconst {data : {confirmed , recovered , deaths , lastUpdate} } = await axios.get(changableurl);\r\nreturn {confirmed , recovered , deaths , lastUpdate};\r\n   \r\n}\r\n    catch(error){\r\nconsole.log(error);\r\n    }\r\n}\r\n\r\nexport const dailydata = async ()=>{\r\n    try{\r\n\r\n        const {data} = await axios.get(`${url}/daily`);\r\n\r\n        const modifieddata = data.map((dailydata)=>({\r\n            confirmed : dailydata.confirmed.total,\r\n            deaths:dailydata.deaths.total,\r\n            date:dailydata.reportDate,\r\n        }));\r\n\r\n        return modifieddata;\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchcountries = async()=>{\r\n    try{\r\n\r\nconst { data : {countries}} = await axios.get(`${url}/countries`);\r\n\r\nreturn countries.map((country) => country.name);\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport { dailydata } from '../../api';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data : {confirmed,recovered,deaths},country}) => {\r\n    const [dailyydata, setdailydata] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const Fetchapi = async () => {\r\n            setdailydata(await dailydata());\r\n        }\r\n\r\n        // console.log(dailyydata);\r\n\r\n        Fetchapi();\r\n    }, []);\r\n\r\n    const Linechart = (\r\n        dailyydata.length ?\r\n            (<Line\r\n                data={{\r\n                    labels: dailyydata.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyydata.map(({ confirmed }) => confirmed),\r\n                        label: \"Infected\",\r\n                        fill: true,\r\n                        borderColor: \"#3333ff\",\r\n                    }, {\r\n                        data: dailyydata.map(({ deaths }) => deaths),\r\n                        label: \"Deaths\",\r\n                        fill: true,\r\n                        borderColor: \"red\",\r\n                    }],\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const Barchart =(\r\nconfirmed?\r\n<Bar \r\ndata={{\r\n    labels:['Infected','Recovered', 'Deaths'],\r\n    datasets:[{\r\n        label:'people',\r\n        backgroundColor:['blue','green','red'],\r\n        data:[confirmed.value , recovered.value, deaths.value]\r\n    }]\r\n}}\r\noptions={{\r\n    legend:{display:false},\r\n    title:{display:true , text:`Current state in ${country}`},\r\n}}\r\n/>\r\n:null\r\n    );\r\n\r\n    return (\r\n       <div className={styles.container}>\r\n{country ? Barchart : Linechart}\r\n       </div>\r\n    )\r\n}\r\nexport default Chart;","import React ,{useState , useEffect} from 'react';\r\nimport {NativeSelect , FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchcountries } from '../../api';\r\n\r\nconst CountryPicker = ({handlecountrychange}) =>{\r\n\r\n    const [fetchedcontries , setfetchedcontries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () =>{\r\n            setfetchedcontries(await fetchcountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[setfetchedcontries]);\r\n\r\n    //  console.log(fetchedcontries);\r\n\r\n    return(\r\n       <FormControl className={styles.container}>\r\n           <NativeSelect defaultValue=\"\" onChange={(e)=>handlecountrychange(e.target.value)}>\r\n               <option value=\"\">Global</option>\r\n               {fetchedcontries.map((country , i)=> \r\n               <option value={country} key={i}>{country}</option>\r\n               )}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","import React from 'react';\nimport {Cards , Chart , CountryPicker} from './Components';\nimport style from './App.module.css';\nimport { fetchdata } from './api';\n\nclass App extends React.Component{\n  state={\n    data :{},\n    country:\"\"\n  }\n\nasync componentDidMount(){\n  const fetchdataa = await fetchdata();\n \n  this.setState({\n    data:fetchdataa\n  });\n}\n\nhandlecountrychange = async(country)=>\n{\n  const fetchdataa = await fetchdata(country);\n  this.setState({\n    data:fetchdataa,\n    country:country\n  });\n}\n\n  render(){\n    const {data , country} = this.state;\n  return (\n    <div className={style.container}>\n    <Cards data={data}/>\n    <CountryPicker handlecountrychange={this.handlecountrychange} />\n    <Chart data={data} country={country} />\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Ar3lU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2qqS_\"};"],"sourceRoot":""}